// +ignore
package 数据结构

func main() {
}


线段树, 对于给定的总区间, 如果我们要频繁的查询和更新
不定区间(即每次查的数据并非限制为单index数据, 而是多个index组合的区间数据, 且查询的区间是可变的)

核心思路是通过二分区间构成多个小区间组合(新增而非覆盖), 并在更新时把涉及改变的区间进行维护, 查询时直接查询区间组合即可
优点是查询时不需要逐个index进行查询组合, 这将是O(n)的复杂度, 变更为优化查询方案, 比如某个区间的答案本身是整个保留在线段树中的
那么就不需要逐个index查询组合了。
缺点: 对应优化查询带来的缺点: 现在维护时需要维护多了一些组合区间; 现在需要更大的空间

其核心思想是使用更多的空间去储存和维护大区间信息, 导致查询不定区间信息的时候能够被优化速度;
很明显这种情况只能针对区间内部各index可以构成统一体才能使用, 而区间内部各index要互相区分的情况则不可以使用
比如讨论某区间的数字总和, 在总和构成中, index1和index2是可以使用加法的(也就是说index1和index2是同样的东西)
但如果讨论某区间的颜色, 在组合构成中, index1黄色和index2红色并不能视为统一形式直接求和(也就是说index1和index2其实是严格不相同的),
这种情况应该无法使用线段树
