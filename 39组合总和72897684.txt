func combinationSum(candidates []int, target int) [][]int {
	sort.Ints(candidates)
	res := make([][]int, 0)
	rec := make([]int, 0)
	dfs(candidates, &rec, &res, target)
	return res
}

func dfs(candidates []int, rec *[]int, res *[][]int, target int) {
	if target == 0 {
		tmp := make([]int, len(*rec))
		copy(tmp, *rec)
		*res = append(*res, tmp)
		return
	}
	for i := 0; i < len(candidates); i++ {
		if (candidates)[i] > target {
			break
		}
		*rec = append(*rec, (candidates)[i])
		dfs(candidates[i:], rec, res, target - (candidates)[i])
		*rec = (*rec)[:len(*rec) - 1]
	}

}

//runtime:0 ms
//memory:2.6 MB
