class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        if n == 0:
            return []
        self.res = []
        self.col = [True] * n
        self.dia1 = [True] * (2*n-1)
        self.dia2 = [True] * (2*n-1)
        self.dfs(n, 0, [])
        return self.res

    def dfs(self, n, index, lst):
        if index == n:
            self.res.append(self.helper(n, lst))
            return
        for i in range(n):
            if self.col[i] and self.dia1[index+i] and self.dia2[index-i+n-1]:
                self.col[i] = False
                self.dia1[index + i] = False
                self.dia2[index - i + n - 1] = False
                lst.append(i)
                self.dfs(n, index+1, lst)
                self.col[i] = True
                self.dia1[index + i] = True
                self.dia2[index - i + n - 1] = True
                lst.pop()

    def helper(self, n, lst):
        res = [['.' for i in range(n)] for j in range(n) ]
        for i in range(n):
            res[i][lst[i]] = 'Q'
        return [''.join(i) for i in res]
# runtime:68 ms
# memory:13.6 MB
